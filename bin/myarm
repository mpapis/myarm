#!/usr/bin/env bash

function big_fail()
{
  echo "$1"
  exit ${2:-1}
}

function load_dot_myarm()
{
  if
    [[ -f ".myarm" ]]
  then
    IMAGE=""
    PORT="5022"
    CPU="arm1176"
    RAM="256"
    source ".myarm"
  else
    big_fail "Failed to find file '.myarm', it should contain:
#required:
IMAGE=2013-05-25-wheezy-raspbian.img
#optional:
PORT=5022
CPU=arm1176
RAM=256
"
  fi
  [[ -n "${IMAGE:-}" ]] || big_fail "missing IMAGE=... check your '.myarm'."
}

report_status()
{
  if (( $2 == 0 ))
  then echo "Finished $1"
  else
    echo "Failed $1 with status $2"
    return $2
  fi
}

function make_sure_img_exist()
{
  [[ -f $3 ]] || {
    echo "Disk image '$3' missing - creating"
    qemu-img create $3 $2
    case $1 in
      (swap)
        mkswap $3
        ;;
      (*)
        mkfs -F -t $1 $3
        ;;
    esac
    report_status "creating image '$3'" $? || return $?
  }
}

function start_image()
{
  typeset -a __command __flags
  make_sure_img_exist swap 2G /dev/shm/swap-${IMAGE##*/}
  make_sure_img_exist ext4 8G data.img
  echo "Starting image"
  __command=(
    qemu-system-arm
    -cpu $CPU -m $RAM
    -hda $IMAGE -hdb /dev/shm/swap-${IMAGE##*/} -hdc data.img
    -append "root=/dev/sda2 panic=1"
    -kernel kernel-qemu -M versatilepb
    -redir tcp:$PORT::22 -no-reboot
    -rtc base=localtime,clock=host,driftfix=slew
  )
  if [[ " $* " =~ " gui " ]]
  then __command+=( -ctrl-grab )
  else __command+=( -display none )
  fi
  if [[ " $* " =~ " console " ]]
  then __command+=( -serial stdio )
  else __command+=( -daemonize )
  fi
  "${__command[@]}"
  report_status "starting image" $? || return $?
  if
    [[ " $* " =~ " ssh " ]]
  then
    wait_for 180 ssh_available
    ssh_image
  fi
}

function stop_image()
{
  typeset __pid=$(image_pid)
  if
    [[ -n "$__pid" ]]
  then
    echo "Stopping image"
    \kill "$__pid"
    wait_for 10 image_stopped
    image_stopped
    report_status "stopping image" $? || return $?
  else
    echo "No pid found for image, assuming it's stopped."
  fi
}

function image_pid()
{
  ps aux | grep -v awk | awk "/$IMAGE/"'{print $2}'
}

function image_running()
{
  ps aux | grep -v grep | grep $IMAGE >/dev/null
}

function image_stopped()
{
  ! image_running
}

function show_status()
{
  if image_running
  then echo "Image running"
  else echo "Image stopped"
  fi
}

function ssh_available()
{
  ssh pi@localhost -p $PORT -o UserKnownHostsFile=/dev/null -o NoHostAuthenticationForLocalhost=yes -q true
}

function port_available()
{
  netstat -tln 2>/dev/null | grep "0.0.0.0:$PORT" > /dev/null
}

function wait_for()
{
  typeset __timeout=$1
  shift
  printf "Waiting ${__timeout}s for $*"
  __timeout=$(( __timeout + $( date +%s )  ))
  while
    (( __timeout > $( date +%s ) ))
  do
    printf "%b" "."
    if "$@"
    then break
    fi
    sleep 1s
  done
  printf "%b" "\n"
}

function ssh_image()
{
  if port_available
  then ssh pi@localhost -p $PORT -o UserKnownHostsFile=/dev/null -o NoHostAuthenticationForLocalhost=yes
  else echo "port 5022 not available, confirm with status if the machine is running" >&2; return 1
  fi
}

function scp_image()
{
  scp -P $PORT -o UserKnownHostsFile=/dev/null -o NoHostAuthenticationForLocalhost=yes "$@"
}

function find_latest_image_url()
{
  echo "Detecting image name" >&2
  typeset __base="http://downloads.raspberrypi.org/images/raspbian/"
  typeset __dir="$(
    curl -sSf "${__base}" | awk -F"[<>]" '$3~/.*-wheezy-raspbian\/$/{print $3}' | sort | tail -n 1
  )"
  typeset __file="$(
    curl -sSf "${__base}${__dir}" | awk -F"[<>]" '$3~/.*-wheezy-raspbian.zip$/{print $3}' | sort | tail -n 1
  )"
  if curl -ILf "${__base}${__dir}${__file}" >/dev/null 2>&1
  then echo "${__base}/${__dir}${__file}"
  else return $?
  fi
}

function prepare_variables()
{
  image_uri="${1:-$(find_latest_image_url)}" || big_fail "Could not detect image to download, search for one here: http://downloads.raspberrypi.org/images/raspbian/"
  image_zip="${image_uri##*/}"
  image_name="${image_zip%.zip}"
  echo "image_name => $image_name"
  IMAGE="${image_name}.img"
}

function prepare_target()
{
  export target_dir="${1:-$image_name}"
  echo "target_dir => $target_dir"
  mkdir -p "$target_dir"
  cd "$target_dir"
  if [[ -f "../${image_zip}" && ! -f "${image_zip}" ]]
  then ln -s "../${image_zip}" "${image_zip}"
  fi
}

function prepare_download()
{
  if
    curl -sSLO "${image_uri}.sha1" &&
    sed -i'' "s#/.*/##"  "${image_zip}.sha1" &&
    shasum -c "${image_zip}.sha1"
  then
    echo "Found local copy of package - skipping download."
  else
    rm -f "${image_zip}" || true
    # first need to extract direct download link
    image_uri="$(
      curl -sSLf "${image_uri}" | grep -o '<a href=".*" title="Direct Link">' | awk -F'"' '{print $2}'
    )" #'
    echo "image_uri => ${image_uri}"
    curl -LO "${image_uri}" &&
    shasum -c "${image_zip}.sha1" ||
    big_fail "Failed downloading package / verifying checksum, aborting, try again later."
  fi
  [[ -f kernel-qemu ]] || {
    echo "Downloading kernel-qemu"
    curl -sSLO http://xecdesign.com/downloads/linux-qemu/kernel-qemu
    report_status "downloading kernel" $?
  }
}

function prepare_extract()
{
  if
    [[ -f "$IMAGE" ]]
  then
    echo "Found extracted image - skipping extract"
  else
    unzip "${image_zip}" &&
    [[ -f "$IMAGE" ]] ||
    big_fail "Failed extracting image"
    echo "IMAGE=$IMAGE" >.myarm
  fi
}

function prepare_manipulate_images()
{
  make_sure_img_exist ext4 8G data-${IMAGE##*/} || return $?
  mkdir -p temp_root temp_data
  (
    set -e
    sudo mount -t ext4      ${IMAGE}     temp_root -o offset=62914560
    sudo mount -t ext4 data-${IMAGE##*/} temp_data
    sudo sed -i'' "s/^\(.*\)$/#\1/" temp_root/etc/ld.so.preload
    sudo rm temp_root/etc/rc*.d/*fake-hwclock
    mv temp_root/home/pi/* temp_root/home/pi/.[a-z]* temp_data/
    (
      sudo mkdir -p temp_data/.ssh
      cat "$HOME/.ssh/id_rsa.pub" | sudo tee -a temp_data/.ssh/authorized_keys
      sudo chown --recursive --reference=temp_root/home/pi temp_data/.ssh
      sudo chmod --recursive -077 temp_data/.ssh
    )
    {
      echo "/dev/sdb swap     swap default          0 0"
      echo "/dev/sdc /home/pi ext4 defaults,noatime 0 0"
    } | sudo tee -a temp_root/etc/fstab
  )
  sudo umount temp_root
  sudo umount temp_data
  rm -rf temp_root temp_data
}

function prepare_info()
{
  echo "
To start using new image run:

    cd $target_dir
    myarm start_ssh
"
  usage
}

function prepare()
{
  typeset image_uri image_zip image_name

  sudo /bin/true

  prepare_variables "$1" &&
  prepare_target    "$2" &&
  prepare_download &&
  prepare_extract  &&
  prepare_manipulate_images
  report_status "manipulating images" $? &&
  prepare_info
}

function usage()
{
  echo "Usage: $0 [prepare [URL [name]]|start [ssh|gui|console]|stop|status|wait_ssh|ssh|scp ...|usage]"
  echo "For 'myarm scp' use 'pi@localhost' as the remote machine"
}

case "${1:-}" in
  (wait_ssh)
    load_dot_myarm
    wait_for 60 ssh_image
    ;;
  (start)
    load_dot_myarm
    shift
    image_running || start_image "$@"
    ;;
  (stop)
    load_dot_myarm
    image_running && stop_image
    ;;
  (restart)
    load_dot_myarm
    image_running && stop_image
    start_image
    ;;
  (status)
    load_dot_myarm
    show_status
    image_running
    ;;
  (ssh)
    load_dot_myarm
    ssh_image
    ;;
  (scp)
    load_dot_myarm
    shift
    scp_image "$@"
    ;;
  (prepare)
    "$@"
    ;;
  (usage)
    usage
    ;;
  (*)
    show_status
    usage
    ;;
esac
